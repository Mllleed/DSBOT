import os
import discord
import asyncio
from discord.ext import commands
from dotenv import load_dotenv
from languages import translations

# from database import log_action, create_table

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–æ–∫–µ–Ω –∏ ID —Å–µ—Ä–≤–µ—Ä–∞
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
GUILD_ID = int(os.getenv("DISCORD_GUILD_ID"))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ–Ω—Ç—ã
intents = discord.Intents.default()
intents.guilds = True
intents.reactions = True
intents.typing = True
intents.voice_states = True
intents.presences = True
intents.members = True
intents.message_content = True

# –ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥
bot = commands.Bot(command_prefix="!", intents=intents)
bot2 = commands.Bot(command_prefix="?", intents=intents)

# –û—á–µ—Ä–µ–¥—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏
queue = asyncio.Queue()


@bot.event
async def on_ready():
    print(f"‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É!")
    guild = bot.get_guild(GUILD_ID)
    if guild:
        print(f"üë• –ß–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {len(guild.members)}")
    else:
        print("‚ùå –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É –∏–ª–∏ ID –Ω–µ–≤–µ—Ä–µ–Ω")
    bot.loop.create_task(process_queue())


async def check_discord_user(username):
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        print("‚ùå –û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID")
        return None

    username_lower = username.lower()
    print(f"üîç –ò—â—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
    
    for member in guild.members:
        if member.name.lower() == username_lower or member.display_name.lower() == username_lower:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {member.name}")
            return member
    
    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    return None


async def process_queue():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    while True:
        print("–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—á–µ—Ä–µ–¥–∏...")
        greeting = await queue.get()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        print(f"üìå–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {greeting}")
        


async def send_verification_message(member):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        view = LanguageSelectView()
        embed = discord.Embed(
            title="Please select your preferred language.",
            color=discord.Color.orange()
        )
        await member.send(embed=embed, view=view)
    except discord.Forbidden:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {member.name}, –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")


class LanguageSelectView(discord.ui.View):
    def __init__(self):
        super().__init__()
        languages = [
            ("English", "üá¨üáß"), ("French", "üá´üá∑"), ("German", "üá©üá™"),
            ("Spanish", "üá™üá∏"), ("Italian", "üáÆüáπ"), ("Polish", "üáµüá±"),
            ("Portuguese", "üáµüáπ"), ("Russian", "üá∑üá∫"), ("Ukrainian", "üá∫üá¶"),
            ("Chinese", "üá®üá≥")
        ]
        for lang, emoji in languages:
            self.add_item(LanguageButton(label=lang, emoji=emoji))
class LanguageButton(discord.ui.Button):
    def __init__(self, label, emoji):
        super().__init__(label=label, style=discord.ButtonStyle.primary, emoji=emoji)

    async def callback(self, interaction: discord.Interaction):
        lang = self.label
        translation = translations[lang]
        try:
            await interaction.response.defer(ephemeral=True)
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
            await interaction.user.send(embed=create_embed(translation["welcome"], discord.Color.orange()))
            
            # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º
            def check(m):
                return m.author == interaction.user and isinstance(m.channel, discord.DMChannel)

            msg = await bot.wait_for('message', check=check)
            username = msg.content

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —É—Ä–æ–≤–Ω—è
            view = LevelSelectView()
            embed = discord.Embed(
                title=translation['level'],
                color=discord.Color.orange()
            )
            await interaction.user.send(embed=embed, view=view)
            print("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —É—Ä–æ–≤–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        except discord.Forbidden:
            await interaction.user.send(embed=create_embed(translations[lang]["enable_dm"], discord.Color.red()))

class LevelButton(discord.ui.Button):
    def __init__(self, label):
        super().__init__(label=label, style=discord.ButtonStyle.primary)

    async def callback(self, interaction: discord.Interaction):
        level = self.label
        translation = translations.get(interaction.locale, translations["English"])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
            await interaction.response.defer(ephemeral=True)
            prepare_message = await interaction.user.send(embed=create_embed(translation["prepare_check"], discord.Color.orange()))

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ (–ø–æ–∫–∞ –ø—É—Å—Ç—ã—à–∫–∞, —Ç–∞–π–º–µ—Ä –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã)
            await asyncio.sleep(3)
            await prepare_message.delete()

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
            await interaction.user.send(embed=create_embed(translation["check_complete"], discord.Color.orange()))

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –ø—É—Å—Ç—ã–µ
            verify_message = translation.get("verify", "").strip()
            verify_link_message = translation.get("verify_link", "").strip()

            if verify_message and verify_link_message:
                # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–Ω–æ
                await interaction.user.send(embed=create_embed_with_title(verify_message, verify_link_message, discord.Color.orange()))
            else:
                await interaction.user.send(embed=create_embed("‚ùå Error: Translation is missing.", discord.Color.red()))

        except discord.Forbidden:
            await interaction.user.send(embed=create_embed(translation["enable_dm"], discord.Color.red()))
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")

class LevelSelectView(discord.ui.View):
    def __init__(self):
        super().__init__()
        levels = range(1, 11)  # –£—Ä–æ–≤–Ω–∏ –æ—Ç 1 –¥–æ 10
        for level in levels:
            self.add_item(LevelButton(label=str(level)))


def create_embed(message, color):
    return discord.Embed(description=message, color=color)

def create_embed_with_title(title, description, color):
    embed = discord.Embed(title=f"**{title}**", description=description, color=color)
    return embed

async def run_discord():
    await bot.start(DISCORD_TOKEN)

def create_embed(message, color):
    return discord.Embed(description=message, color=color)

def create_embed_with_title(title, description, color):
    embed = discord.Embed(title=f"**{title}**", description=description, color=color)
    return embed

async def run_discord():
    await bot.start(DISCORD_TOKEN)

